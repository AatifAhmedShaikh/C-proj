#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STUDENTS 100

// Define the structure for a student
typedef struct {
    int roll_no;
    char name[50];
    int age;
    char grade;
} Student;

// Declare an array to hold the student records
Student students[MAX_STUDENTS];
int student_count = 0;

// Function to add a student
void add_student() {
    if (student_count >= MAX_STUDENTS) {
        printf("Cannot add more students. Maximum limit reached.\n");
        return;
    }
    Student new_student;
    printf("Enter Roll Number: ");
    scanf("%d", &new_student.roll_no);
    getchar(); // To consume newline after the integer input
    printf("Enter Name: ");
    fgets(new_student.name, sizeof(new_student.name), stdin);
    new_student.name[strcspn(new_student.name, "\n")] = '\0'; // Remove newline
    printf("Enter Age: ");
    scanf("%d", &new_student.age);
    getchar(); // To consume newline after the integer input
    printf("Enter Grade: ");
    scanf("%c", &new_student.grade);
    
    students[student_count++] = new_student;
    printf("Student added successfully!\n");
}

// Function to display all students
void display_students() {
    if (student_count == 0) {
        printf("No student records available.\n");
        return;
    }
    printf("\nList of Students:\n");
    printf("Roll No. | Name               | Age | Grade\n");
    printf("----------------------------------------------\n");
    for (int i = 0; i < student_count; i++) {
        printf("%d        | %-18s | %3d | %c\n", students[i].roll_no, students[i].name, students[i].age, students[i].grade);
    }
}

// Function to delete a student
void delete_student() {
    int roll_no;
    printf("Enter Roll Number of the student to delete: ");
    scanf("%d", &roll_no);
    
    int found = 0;
    for (int i = 0; i < student_count; i++) {
        if (students[i].roll_no == roll_no) {
            // Shift all students after the deleted one
            for (int j = i; j < student_count - 1; j++) {
                students[j] = students[j + 1];
            }
            student_count--;
            found = 1;
            printf("Student with Roll No. %d deleted successfully.\n", roll_no);
            break;
        }
    }
    
    if (!found) {
        printf("No student found with Roll Number %d.\n", roll_no);
    }
}

// Function to search a student by roll number
void search_student() {
    int roll_no;
    printf("Enter Roll Number to search: ");
    scanf("%d", &roll_no);

    int found = 0;
    for (int i = 0; i < student_count; i++) {
        if (students[i].roll_no == roll_no) {
            printf("\nStudent Found!\n");
            printf("Roll No. : %d\n", students[i].roll_no);
            printf("Name     : %s\n", students[i].name);
            printf("Age      : %d\n", students[i].age);
            printf("Grade    : %c\n", students[i].grade);
            found = 1;
            break;
        }
    }

    if (!found) {
        printf("No student found with Roll Number %d.\n", roll_no);
    }
}

// Function to display the menu
void display_menu() {
    printf("\nStudent Management System\n");
    printf("1. Add Student\n");
    printf("2. Display Students\n");
    printf("3. Delete Student\n");
    printf("4. Search Student by Roll Number\n");
    printf("5. Exit\n");
    printf("Enter your choice: ");
}

int main() {
    int choice;
    
    while (1) {
        display_menu();
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                add_student();
                break;
            case 2:
                display_students();
                break;
            case 3:
                delete_student();
                break;
            case 4:
                search_student();
                break;
            case 5:
                printf("Exiting Student Management System...\n");
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }
    
    return 0;
}
